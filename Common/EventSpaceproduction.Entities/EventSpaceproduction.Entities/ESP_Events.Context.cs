//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EventSpaceproduction.Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class ESP_EventsEntities : DbContext
    {
        public ESP_EventsEntities()
            : base("name=ESP_EventsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<EventLocation> EventLocations { get; set; }
        public DbSet<Event> Events { get; set; }
        public DbSet<LocationRoom> LocationRooms { get; set; }
        public DbSet<Location> Locations { get; set; }
        public DbSet<Room> Rooms { get; set; }
        public DbSet<ESPVW_EventLocationRoomList> ESPVW_EventLocationRoomList { get; set; }
    
        public virtual int ESPSP_AddUpdateExistingEvent(string eventName, string eventDescription, Nullable<System.DateTime> eventStartDate, Nullable<System.DateTime> eventEndDate)
        {
            var eventNameParameter = eventName != null ?
                new ObjectParameter("EventName", eventName) :
                new ObjectParameter("EventName", typeof(string));
    
            var eventDescriptionParameter = eventDescription != null ?
                new ObjectParameter("EventDescription", eventDescription) :
                new ObjectParameter("EventDescription", typeof(string));
    
            var eventStartDateParameter = eventStartDate.HasValue ?
                new ObjectParameter("EventStartDate", eventStartDate) :
                new ObjectParameter("EventStartDate", typeof(System.DateTime));
    
            var eventEndDateParameter = eventEndDate.HasValue ?
                new ObjectParameter("EventEndDate", eventEndDate) :
                new ObjectParameter("EventEndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ESPSP_AddUpdateExistingEvent", eventNameParameter, eventDescriptionParameter, eventStartDateParameter, eventEndDateParameter);
        }
    
        public virtual int ESPSP_AddUpdateExistingLocation(string locationName, Nullable<int> image)
        {
            var locationNameParameter = locationName != null ?
                new ObjectParameter("LocationName", locationName) :
                new ObjectParameter("LocationName", typeof(string));
    
            var imageParameter = image.HasValue ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ESPSP_AddUpdateExistingLocation", locationNameParameter, imageParameter);
        }
    
        public virtual int ESPSP_AddUpdateExistingRoom(string roomName, Nullable<System.TimeSpan> operationsStart, Nullable<System.TimeSpan> operationsEnd, Nullable<bool> active, Nullable<int> image)
        {
            var roomNameParameter = roomName != null ?
                new ObjectParameter("RoomName", roomName) :
                new ObjectParameter("RoomName", typeof(string));
    
            var operationsStartParameter = operationsStart.HasValue ?
                new ObjectParameter("OperationsStart", operationsStart) :
                new ObjectParameter("OperationsStart", typeof(System.TimeSpan));
    
            var operationsEndParameter = operationsEnd.HasValue ?
                new ObjectParameter("OperationsEnd", operationsEnd) :
                new ObjectParameter("OperationsEnd", typeof(System.TimeSpan));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var imageParameter = image.HasValue ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ESPSP_AddUpdateExistingRoom", roomNameParameter, operationsStartParameter, operationsEndParameter, activeParameter, imageParameter);
        }
    
        public virtual int ESPSP_AssignLocationToEvent(string eventName, string locationName)
        {
            var eventNameParameter = eventName != null ?
                new ObjectParameter("EventName", eventName) :
                new ObjectParameter("EventName", typeof(string));
    
            var locationNameParameter = locationName != null ?
                new ObjectParameter("LocationName", locationName) :
                new ObjectParameter("LocationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ESPSP_AssignLocationToEvent", eventNameParameter, locationNameParameter);
        }
    
        public virtual int ESPSP_AssignRoomToLocation(string locationName, string roomName)
        {
            var locationNameParameter = locationName != null ?
                new ObjectParameter("LocationName", locationName) :
                new ObjectParameter("LocationName", typeof(string));
    
            var roomNameParameter = roomName != null ?
                new ObjectParameter("RoomName", roomName) :
                new ObjectParameter("RoomName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ESPSP_AssignRoomToLocation", locationNameParameter, roomNameParameter);
        }
    }
}
